@Test
public void testGetBanks_success() throws Exception {
    // Given
    String tokenJson = "{\"token\":\"mocked-token-value\"}";
    String banksJson = "[{\"_id\":\"BANK123\"}]";

    // Mock getApiExt pour token
    Mockito.when(aggreg8.getApiExt(
        Mockito.anyString(),
        eq(Aggreg8Constants.AGGREG8_TOKEN),
        Mockito.isNull(),
        Mockito.isNull(),
        Mockito.isNull()
    )).thenReturn(tokenJson);

    // Mock getApiExt pour banques
    Mockito.when(aggreg8.getApiExt(
        Mockito.anyString(),
        eq(Aggreg8Constants.AGGREG8_URL_GET_BANKS),
        Mockito.isNull(),
        Mockito.isNull(),
        Mockito.any()
    )).thenReturn(banksJson);

    // Mock des référentiels nécessaires
    ReferentialEntreprise mockEnt11 = Mockito.mock(ReferentialEntreprise.class);
    ReferentialEntreprise mockEnt13 = Mockito.mock(ReferentialEntreprise.class);
    ReferentialEntreprise mockEnt14 = Mockito.mock(ReferentialEntreprise.class);

    Mockito.when(mockEnt11.getRefLibTwo()).thenReturn("1");
    Mockito.when(mockEnt13.getRefLibTwo()).thenReturn("3");
    Mockito.when(mockEnt14.getRefLibTwo()).thenReturn("10");

    // Mock des appels avec bons codes
    Mockito.when(refService.getReferentialValue(
        eq(ReferentialEntreprise.class),
        eq(Aggreg8Constants.AGGREG8_GRP_REF),
        eq(1), eq(11), eq(1)
    )).thenReturn(mockEnt11);

    Mockito.when(refService.getReferentialValue(
        eq(ReferentialEntreprise.class),
        eq(Aggreg8Constants.AGGREG8_GRP_REF),
        eq(1), eq(13), eq(1)
    )).thenReturn(mockEnt13);

    Mockito.when(refService.getReferentialValue(
        eq(ReferentialEntreprise.class),
        eq(Aggreg8Constants.AGGREG8_GRP_REF),
        eq(1), eq(14), eq(1)
    )).thenReturn(mockEnt14);

    // When
    BankAggreg8ResponseDto[] result = aggreg8.getBanks();

    // Then
    assertNotNull(result);
    assertEquals(1, result.length);
    assertEquals("BANK123", result[0].get_id());
}